# 벡터끼리의 덧셈
X = c(1, 3, 5)
Y = c(2, -1, 0)
X + Y
install.package("matlib")
Install.package("matlib")
install.package("matlib")
Install.package("matlib")
install.package("matlib")
install.packages("matlib")
library(matlib)  # matlib library setting
# 플롯 기본 셋팅
xlim <- c(0,6)
ylim <- c(0,6)
plot(xlim, ylim, type="n", xlab="X1", ylab="X2", asp=1)
grid()
# define some vectors
a = c(4,2)
b = c(1,3)
# vector plotting (vectors 함수 활용)
vectors(b, labels="b", pos.lab=4, frac.lab=.5, col="green")
vectors(a, labels="a", pos.lab=4, frac.lab=.5)
vectors(a+b, labels="a+b", pos.lab=4, frac.lab=.5, col="red")
# x가 (3,5), y가 (1,2)일때 빗변의 길이
x = c(3, 5)
y = c(1, 2)
y_x = sqrt((3-1)^2 + (5-2)^2)
y_x
a = c(0,4)
b = c(5,0)
a%*%b/(sqrt(a%*%a) %*% sqrt(b%*%b))
a = c(2,4)
b = c(3,1)
length_a = sqrt(2^2 + 4^2)
length_b = sqrt(3^2 + 1^2)
length_a * length_b * cos_theta
a = c(2,4)
b = c(3,1)
cos_theta = a%*%b/(sqrt(a%*%a) %*% sqrt(b%*%b))
length_a = sqrt(2^2 + 4^2)
length_b = sqrt(3^2 + 1^2)
length_a * length_b * cos_theta
res = matrix(0, 980, 1)  # 결과 저장
for(i in 1:980){ # 각도를 키워가며 코사인 값 계산
res[i,1] = cos(i*pi/180) # 수치를 각도로 변환
}
plot(res, type = "l")
which(res <= 0.7)  # 0.7보다 처음으로 작아지는 값?
a = matrix(c(2,0,1,1,3,-1), nrow=2)
a = matrix(c(2,0,1,1,3,-1), nrow=2)
a
a_t = tr(a)
a_t = transpose(a)
a_t = t(a)
a_t
a = matrix(c(1, 4, 2, 5, 3, 6), nrow = 2)
a
b = matrix(c(0, 2, 1, -1, 0, 5), nrow = 2)
b = matrix(c(0, 2, 1, -1, 0, 5), nrow = 2)
b
mat_sum = a + b
mat_sum = a + b
mat_sum
c1 = 2
A = matrix(c(1, 2, 0, 5), nrow=2)
c1 * A
A = matrix(c(3, 4, -1, 0, 2, 5), nrow = 2)
B = matrix(c(3, 6, 4, 4, -2, 3), nrow = 3)
C = A * B
A = matrix(c(3, 4, -1, 0, 2, 5), nrow = 2)
B = matrix(c(3, 6, 4, 4, -2, 3), nrow = 3)
A
B
A = matrix(c(3, 4, -1, 0, 2, 5), nrow = 2)
B = matrix(c(3, 6, 4, 4, -2, 3), nrow = 3)
C = A * B
A = matrix(c(3, 4, -1, 0, 2, 5), nrow = 2)
B = matrix(c(3, 6, 4, 4, -2, 3), nrow = 3)
C = A %*% B
A = matrix(c(3, 4, -1, 0, 2, 5), nrow = 2)
B = matrix(c(3, 6, 4, 4, -2, 3), nrow = 3)
C = A %*% B
C
A = matrix(c(1, 6, 3, 4), nrow = 2)
det(A)
1/det(A)
B = matrix(c(3, 7, 2, 1, 4, -7, 6, 5, 1), nrow = 3)
B = matrix(c(3, 7, 2, 1, 4, -7, 6, 5, 1), nrow = 3)
det(B)
mat = matrix(c(2, 4, 3, 1, 3, 2, 4, 5, 1, 2, 3, 4, 1, 1, 2, 4), nrow = 4)
mat
solve(mat)
mat = matrix(c(2, 4, 3, 1, 3, 2, 4, 5, 1, 2, 3, 4, 1, 1, 2, 4), nrow = 4)
mat
solve(mat)
inv(mat)
install pracma
mat = matrix(c(2, 4, 3, 1, 3, 2, 4, 5, 1, 2, 3, 4, 1, 1, 2, 4), nrow = 4)
mat
solve(mat)
inv(mat)
install.packages("pracma")
mat = matrix(c(2, 4, 3, 1, 3, 2, 4, 5, 1, 2, 3, 4, 1, 1, 2, 4), nrow = 4)
mat
solve(mat)
inv(mat)
mat = matrix(c(2, 4, 3, 1, 3, 2, 4, 5, 1, 2, 3, 4, 1, 1, 2, 4), nrow = 4)
mat
solve(mat)
library("pracma")
inv(mat)
mat %*% inv(mat)
A = matrix(c(1, 3, 2, 4), nrow=2)
A_T = t(A)
tr(A%*%A_T)
A = matrix(c(1, 3, 2, 4), nrow=2)
A_T = t(A)
library("pracma")
tr(A%*%A_T)
A = matrix(c(1, 3, 2, 4), nrow=2)
A_T = t(A)
tr(A)
A = matrix(c(1, 3, 2, 4), nrow=2)
A_T = t(A)
sum(diag(A%*%A_T))
v = c(1, 2, 1)
Norm(v, p=2)
v = c(1, 2, 1)
v
Norm(v, p=2)
P = matrix(c(2, 4, 3, 2), ncol=2)
P
Norm(P, p=1)
mat = matrix(c(5, 25, 35, 25, 166, 175, 35, 175, 325), ncol = 3)
mat
eanalysis = eigen(mat, symmetric = T)  # mat가 대칭 행렬인지 test
eanalysis
